/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package cinemalog;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;

public class Cinemapay extends JFrame implements ActionListener {

    private final JLabel movieLabel;
    private final JLabel infoLabel;
    private final JComboBox<String> movieComboBox;
    private final JComboBox<String> scheduleComboBox;
    private final JComboBox<String> watchInComboBox;
    private final JComboBox<String> cinemaComboBox;
    private final JComboBox<String> dateComboBox;
    private final JButton scheduleButton;
    private final JButton proceedToPaymentButton;
    private final JTextArea paymentSummaryTextArea;
    private final JSpinner ticketSpinner;
    private final JButton chooseSeatsButton;
    private JButton orderFoodButton;

    private final String[] movies = {"Aquman and The Lost Kingdom", "Wonka", "The Beekeeper", "Rweind", "Thanksgiving", "The Boy and The Heron", "No Way Up", "Migration", "Spiderman-No Way Home", "Jujutsu Kaisen 0"};
    private final String[] schedules = {"10:00 am", "11:30 am", "01:00 pm", "2:30 pm", "4:00 pm", "5:30 pm", "7:00 pm", "8:30 pm"};
    private final String[] watchIns = {"2D", "3D"};
    private final String[] cinemas = {"Cinema 4", "Cinema 5", "Cinema 6"};

    private final double[][] moviePrices = {
            {330.00, 20.00}, // Aquaman and The Lost Kingdom, Wonka, The Beekeeper
            {280.00, 15.00}, // Rewind, The Boy and The Heron, Migration
            {350.00, 25.00}, // Thanksgiving, No Way Up
            {380.00, 30.00} // Spiderman-No Way Home, Jujutsu Kaisen 0
    };

    public Cinemapay() {
        setTitle("CINEMA TECH");
        setSize(400, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Movie Label
        movieLabel = new JLabel("Select a movie:");
        movieLabel.setBounds(20, 20, 200, 30);
        add(movieLabel);

        // Movie ComboBox
        movieComboBox = new JComboBox<>(movies);
        movieComboBox.setBounds(130, 20, 200, 30);
        movieComboBox.addActionListener(this);
        add(movieComboBox);
        
        

        // Info Label
        infoLabel = new JLabel(" ");
        infoLabel.setBounds(20, 60, 360, 30);
        add(infoLabel);

        // Schedule ComboBox
        scheduleComboBox = new JComboBox<>(schedules);
        scheduleComboBox.setBounds(20, 100, 150, 30);
        add(scheduleComboBox);
        
        

        // Watch In ComboBox
        watchInComboBox = new JComboBox<>(watchIns);
        watchInComboBox.setBounds(200, 100, 150, 30);
        add(watchInComboBox);

        // Cinema ComboBox
        cinemaComboBox = new JComboBox<>(cinemas);
        cinemaComboBox.setBounds(20, 140, 150, 30);
        add(cinemaComboBox);

        // Date ComboBox
        dateComboBox = new JComboBox<>(getDates());
        dateComboBox.setBounds(200, 140, 150, 30);
        add(dateComboBox);

        // Ticket Spinner
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel(1, 1, 10, 1); // Initial, Min, Max, Step
        ticketSpinner = new JSpinner(spinnerModel);
        ticketSpinner.setBounds(20, 180, 150, 30);
        add(ticketSpinner);

        // Schedule Button
        scheduleButton = new JButton("Schedule");
        scheduleButton.setBounds(20, 220, 150, 30);
        scheduleButton.addActionListener(this);
        add(scheduleButton);

        // Proceed to Payment Button
        proceedToPaymentButton = new JButton("Proceed to Payment");
        proceedToPaymentButton.setBounds(200, 260, 150, 30);
        proceedToPaymentButton.addActionListener(this);
        add(proceedToPaymentButton);

        // Payment Summary TextArea
        paymentSummaryTextArea = new JTextArea();
        paymentSummaryTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(paymentSummaryTextArea);
        scrollPane.setBounds(20, 300, 330, 200);
        add(scrollPane);

        // Choose Seats Button
        chooseSeatsButton = new JButton("Choose Seats");
        chooseSeatsButton.setBounds(200, 220, 150, 30);
        chooseSeatsButton.addActionListener(this);
        chooseSeatsButton.setEnabled(false); // Disabled by default
        add(chooseSeatsButton);

        setLayout(null);
        setVisible(true);
        
        // Order Food Button
        orderFoodButton = new JButton("Order Food");
        orderFoodButton.setBounds(20, 260, 150, 30); // Adjusted Y-coordinate
        orderFoodButton.addActionListener(this);
        add(orderFoodButton);
        
    }

    private void chooseSeats() {
        // Your chooseSeats() method remains unchanged
        // ... (The implementation of the chooseSeats method)
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == movieComboBox) {
            updateInfoLabel();
        } else if (e.getSource() == scheduleButton) {
            generatePaymentSummary("Schedule");
            chooseSeatsButton.setEnabled(true); // Enable "Choose Seats" button after schedule selection
        } else if (e.getSource() == proceedToPaymentButton) {
            proceedToPayment();
        } else if (e.getSource() == chooseSeatsButton) {
            chooseSeats();
        }
          else if (e.getSource() == orderFoodButton) {
            orderFood();
        }
    }
    
    

    private void updateInfoLabel() {
        // Your updateInfoLabel() method remains unchanged
        // ... (The implementation of the updateInfoLabel method)
    }

    private void generatePaymentSummary(String action) {
    String movie = movieComboBox.getSelectedItem().toString();
    String schedule = scheduleComboBox.getSelectedItem().toString();
    String watchIn = watchInComboBox.getSelectedItem().toString();
    String cinema = cinemaComboBox.getSelectedItem().toString();
    String date = dateComboBox.getSelectedItem().toString();
    int tickets = (int) ticketSpinner.getValue();

    double ticketPrice = 0.0;
    double watchInPrice = 0.0;
    for (double[] prices : moviePrices) {
        if (movie.startsWith("Aquaman") || movie.startsWith("Wonka") || movie.startsWith("The Beekeeper")) {
            ticketPrice = prices[0];
            watchInPrice = prices[1];
            break;
        } else if (movie.startsWith("Rewind") || movie.startsWith("The Boy") || movie.startsWith("Migration")) {
            ticketPrice = prices[0];
            watchInPrice = prices[1];
            break;
        } else if (movie.startsWith("Thanksgiving") || movie.startsWith("No Way Up")) {
            ticketPrice = prices[0];
            watchInPrice = prices[1];
            break;
        } else if (movie.startsWith("Spiderman") || movie.startsWith("Jujutsu")) {
            ticketPrice = prices[0];
            watchInPrice = prices[1];
            break;
        }
    }

    double totalTicketPrice = ticketPrice * tickets;
    double totalWatchInPrice = watchInPrice * tickets;
    double totalPrice = totalTicketPrice + totalWatchInPrice;

    String summary = "Movie: " + movie + "\n" +
            "Schedule: " + schedule + "\n" +
            "Watch In: " + watchIn + "\n" +
            "Cinema: " + cinema + "\n" +
            "Date: " + date + "\n" +
            "Tickets: " + tickets + "\n" +
            "Total Ticket Price: $" + totalTicketPrice + "\n" +
            "Total Watch In Price: $" + totalWatchInPrice + "\n" +
            "Total Price: $" + totalPrice;

    paymentSummaryTextArea.setText(summary);
}


    private String[] getDates() {
    String[] dates = new String[314]; // Total 314 days from February to December 2024
    Calendar cal = Calendar.getInstance();
    cal.set(Calendar.YEAR, 2024);
    cal.set(Calendar.MONTH, Calendar.FEBRUARY);
    for (int i = 0; i < 29; i++) {
        cal.set(Calendar.DAY_OF_MONTH, i + 1);
        dates[i] = (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.DAY_OF_MONTH) + "/" + cal.get(Calendar.YEAR);
    }
    cal.set(Calendar.MONTH, Calendar.MARCH);
    for (int i = 0; i < 31; i++) {
        cal.set(Calendar.DAY_OF_MONTH, i + 1);
        dates[i + 29] = (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.DAY_OF_MONTH) + "/" + cal.get(Calendar.YEAR);
    }
    cal.set(Calendar.MONTH, Calendar.APRIL);
    for (int i = 0; i < 30; i++) {
        cal.set(Calendar.DAY_OF_MONTH, i + 1);
        dates[i + 60] = (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.DAY_OF_MONTH) + "/" + cal.get(Calendar.YEAR);
    }
    // Continue for remaining months
    // Assuming you would continue this pattern for the rest of the months in 2024
    return dates;
}


    private void proceedToPayment() {
        // Your proceedToPayment() method remains unchanged
        // ... (The implementation of the proceedToPayment method)
    }
    
    private void orderFood() {
        // Open the Cinemafood frame
        new cinemafood();
    }

    public static void main(String[] args) {
        new Cinemapay();
    }
}
