package cinemalog;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import cinemalog.Cinemareceipt;

public class Cinemaseat extends JFrame {
    private String selectedMovie;
    private String selectedSchedule;
    private int mouseX, mouseY;
    private int initialTicketCount;

    // Add a field to store selected seats
    private final List<String> selectedSeats = new ArrayList<>();

    public Cinemaseat(String selectedMovie, String selectedSchedule, String[] selectedSeats) {
        this.selectedMovie = selectedMovie;
        this.selectedSchedule = selectedSchedule;
        this.initialTicketCount = initialTicketCount;

        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(null); // Use null layout for absolute positioning
        setUndecorated(false); // Set undecorated to false to show window decorations

        JPanel redPanel = new JPanel();
        redPanel.setBackground(new Color(31, 2, 2));
        redPanel.setBounds(0, 0, 800, 40);

        JPanel blackPanel = new JPanel();
        blackPanel.setBackground(new Color(31, 2, 2));
        blackPanel.setBounds(0, 40, 800, 560);

        JPanel seatsinmid = new JPanel();
        seatsinmid.setLayout(new GridLayout(7, 9, 3, 3)); // Changed to 20 columns
        seatsinmid.setBackground(new Color(31, 2, 2));
        seatsinmid.setBounds(5, 150, 790, 300);

        

        JLabel Title = new JLabel("SELECT SEATS");
        Title.setFont(new Font("Helvetica", Font.PLAIN, 20));
        Title.setForeground(Color.WHITE);
        Title.setBounds(335, 0, 780, 40);

        // "Receipt" button
        JButton receiptButton = new JButton("Receipt");
        receiptButton.setFont(new Font("Helvetica", Font.PLAIN, 14));
        receiptButton.setForeground(Color.WHITE);
        receiptButton.setBackground(new Color(230, 22, 16));
        receiptButton.setBorder(BorderFactory.createLineBorder(new Color(230, 22, 16)));
        receiptButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        receiptButton.setBounds(670, 10, 100, 30);
        receiptButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openReceipt();
            }
        });

        // Add seats to seatsinmid
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 9; j++) {
                if ((j == 2 || j == 7) && (i >= 0 && i < 7)) {
                    // Add a gap of 3 columns
                    for (int k = 0; k < 1; k++) {
                        JPanel gap = new JPanel();
                        gap.setBackground(new Color(31, 2, 2));
                        seatsinmid.add(gap);
                    }
                }

                JLabel seat = new JLabel((char) ('A' + i) + "" + (j + 1));
                seat.setFont(new Font("Helvetica", Font.PLAIN, 14));
                seat.setForeground(Color.BLACK);
                seat.setBackground(Color.WHITE);
                seat.setOpaque(true);
                seat.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                seat.setHorizontalAlignment(JLabel.CENTER);
                seat.setCursor(new Cursor(Cursor.HAND_CURSOR));
                seat.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        toggleSeatSelection(seat);
                    }
                });
                seatsinmid.add(seat);
            }
        }

        // Add mouse listeners for dragging the frame
        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                mouseX = e.getX();
                mouseY = e.getY();
            }
        });

        addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                int deltaX = e.getX() - mouseX;
                int deltaY = e.getY() - mouseY;
                setLocation(getLocation().x + deltaX, getLocation().y + deltaY);
            }
        });
        add(Title);

        add(seatsinmid);
        add(redPanel);
        add(blackPanel);
        add(receiptButton); // Add the "Receipt" button

        setVisible(true); // Moved setVisible(true) to the end
        
    }

    // Method to toggle seat selection
    private void toggleSeatSelection(JLabel seatLabel) {
        if (seatLabel.getBackground() == Color.RED) {
            seatLabel.setBackground(Color.WHITE);
            selectedSeats.remove(seatLabel.getText());
        } else {
            seatLabel.setBackground(Color.RED);
            selectedSeats.add(seatLabel.getText());
        }
    }

    // Method to open the receipt window
    private void openReceipt() {
    // Check if any seats are selected
    if (selectedSeats.size() == initialTicketCount) {
        // Create an instance of Cinemareceipt and pass relevant information
        new Cinemareceipt(selectedMovie, selectedSchedule, selectedSeats.toArray(new String[0]));
    } else {
        // Display an error message if the selected seat count doesn't match the number of tickets
        JOptionPane.showMessageDialog(this, "Please select " + initialTicketCount + " seats.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    public static void main(String[] args) {
    // Assume that the user has selected a movie and schedule elsewhere in the program
    String selectedMovie = "Aquaman and The Lost Kingdom";
    String selectedSchedule = "10:00 am";

    // Create an instance of Cinemaseat with selected movie and schedule
    SwingUtilities.invokeLater(() -> new Cinemaseat(selectedMovie, selectedSchedule, new String[]{}).setVisible(true));
}
}
